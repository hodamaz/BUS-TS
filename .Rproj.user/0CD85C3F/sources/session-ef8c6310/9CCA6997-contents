# DS4B 101-R: R FOR BUSINESS ANALYSIS ----
# DATA WRANGLING OVERVIEW ----


library(tidyverse)
library(readxl)

bikes_tbl           <- read_excel("../DS4B_101_R_Business_Analysis/00_data/bike_sales/data_wrangled/bike_orderlines.xlsx")
orderlines_tbl      <- read_excel("00_data/bike_sales/data_raw/orderlines.xlsx")
bike_orderlines_tbl <- read_rds("00_data/bike_sales/data_wrangled/bike_orderlines.rds")


# 1.0 Selecting Columns with select() ----
# seleceting cols you need or simply reducing 
bike_orderlines_tbl %>% 
    select(order_date, order_id, order_line)

bike_orderlines_tbl %>% 
    select(1:3)


bike_orderlines_tbl %>% 
    select(starts_with('order_'))

# Reduce columns (visualization purposes)
bike_orderlines_tbl %>% 
    select(order_date, total_price, category_1, category_2)

# Rearrange columns
bike_orderlines_tbl %>% 
    select(bikeshop_name:state, everything())

# select helpers
bike_orderlines_tbl %>% 
    select(starts_with('price'))

# pull()
bike_orderlines_tbl %>% 
    # select(total_price) %>% 
    pull(total_price) %>% 
    mean()

bike_orderlines_tbl %>% 
    pull(model)

# select_if
bike_orderlines_tbl %>% 
    select_if(is.character)
bike_orderlines_tbl %>% 
    select_if(~ !is_numeric(.))

bike_orderlines_tbl %>% 
    select_if(~ is_numeric(.))

# 2.0 Arranging with arrange() and desc() ----

bikes_tbl %>% 
    select(model, price) %>% 
    arrange(desc(price)) %>% 
    View()

# 3.0 Filtering Rows with filter() ----

# 3.1 filter(): formula filtering ----

bikes_tbl %>% 
    select(model, price) %>% 
    filter(price > mean(price))

bikes_tbl %>% 
    select(model, price) %>% 
    filter(price > 5000 | price < 1000) %>% 
    arrange(desc(price)) %>% 
    View()

bikes_tbl %>% 
    select(model, price) %>% 
    filter(price>6000,
           model %>% str_detect('Supersix'))

# Filtering one or more conditions exactly using %in% and ==
bike_orderlines_tbl %>% 
    filter(category_2 %in% c('Over Mountain', 'Trail', 
                             'Endurance Road'))
bike_orderlines_tbl %>% 
    filter(category_2 =='Over Mountain')

bike_orderlines_tbl %>% #negating
    filter(category_2!='Over Mountain')

bike_orderlines_tbl %>% 
    filter(!(category_2 %in% c('Over Mountain', 'Trail', 
                             'Endurance Road')))

# 3.2 slice(): filtering with row number(s) ----

bikes_tbl %>% 
    arrange(desc(price)) %>% 
    slice(1:5)

bikes_tbl %>% 
    arrange(price) %>% 
    slice(1:5)

bikes_tbl %>% 
    arrange(desc(price)) %>% 
    slice(93:97)

bikes_tbl %>% 
    arrange(desc(price)) %>% 
    slice((nrow(.)-4):nrow(.))

# 3.3 distinct() to unique values
bike_orderlines_tbl %>% 
    distinct(category_1)

bike_orderlines_tbl %>% 
    distinct(category_1, category_2) # combination of cat-1 and cat-2

bike_orderlines_tbl %>% 
    distinct(bikeshop_name, city, state)

# 4.0 Adding Columns with mutate() ----

# Adding a column
bike_orderlines_prices <-  bike_orderlines_tbl %>% 
    select(order_date, model, quantity, price) %>% 
    mutate(total_price = quantity*price)

# Overwrite a column
bike_orderlines_prices %>% 
    mutate(total_price_log = log(total_price)) %>% 
    mutate(total_price_sqrt = total_price^0.5)

# Addig a flag (binary value)
bike_orderlines_prices %>% 
    mutate(is_supersix = model %>% str_to_lower() %>% 
               str_detect('supersix')) %>% 
    filter(is_supersix)

# Binning and if statements

bike_orderlines_prices %>% 
    mutate(total_price_binned = ntile(total_price, n = 3))

# case_when() = more flexible binning

# Numeric to categorical
bike_orderlines_prices %>% 
    mutate(total_price_binned = ntile(total_price, n = 3)) %>% 
    mutate(total_price_binned2 = case_when(
        total_price > quantile(total_price, 0.66) ~ 'High',
        total_price > quantile(total_price, 0.33) ~ 'medium',
        TRUE ~ 'Low'
    ))

# Text to categorical 
bike_orderlines_prices %>% 
    mutate(bike_type = case_when(
        model %>% str_to_lower() %>% str_detect('supersix') ~ 'Supersix', # Condition 1
        model %>% str_to_lower() %>% str_detect('jekyll') ~'Jekyll',
        TRUE ~ 'Not Supersix' # Condition 2/ if_else
        
    ))

# 5.0 Grouping & Summarizing with group_by() and summarize() ----

# Basics \

bike_orderlines_tbl %>% 
    summarize(
        revenu = sum(total_price)
    )

bike_orderlines_tbl %>% 
    group_by(category_1) %>% 
    summarize(revenue = sum(total_price))

bike_orderlines_tbl %>% 
    group_by(category_1, category_2) %>% 
    summarize(revenue = sum(total_price)) %>% 
    ungroup() %>% 
    arrange(desc(revenue))

bike_orderlines_tbl %>% 
    group_by(category_1, category_2, frame_material) %>% 
    summarize(revenue = sum(total_price)) %>% 
    ungroup() %>% 
    arrange(desc(revenue))

## Pro-tip: Always ungroup() after you summarize()
## Leftover groups will cause difficult-to-detect errors

# Summary functions

bike_orderlines_tbl %>% 
    group_by(category_1, category_2) %>% 
    summarize(
        count  = n(),
        avg    = mean(total_price),
        med    = median(total_price),
        sd     = sd(total_price),
        min    = min(total_price),
        max    = max(total_price)
    ) %>% 
    ungroup() %>% 
    arrange(desc(count))

# summarize_all, detecting missing values

bike_orderlines_missing <-  bike_orderlines_tbl %>% 
    mutate(total_price = c(rep(NA, 4), total_price[5:nrow(.)]))

bike_orderlines_missing %>% 
    summarize_all(~ sum(is.na(.)))

bike_orderlines_missing %>% 
    summarize_all(~sum(is.na(.)/length(.)))

bike_orderlines_missing %>% 
    filter(!is.na(total_price))
# 6.0 Renaming columns with rename() and set_names() ----
# 6.1 rename: One column at a time ----
bikeshop_revenue_tbl <-  bike_orderlines_tbl %>% 
    select(bikeshop_name, category_1, total_price) %>% 
    
    group_by(bikeshop_name, category_1) %>% 
    summarize(sales = sum(total_price)) %>% 
    ungroup() %>% 
    
    arrange(desc(sales))

bikeshop_revenue_tbl %>% 
    rename(
        `Bikeshope name`   = bikeshop_name, # use backticks if you have space
        `Primary category` = category_1,
        Sales              = sales
    )

# 6.2 set_names: All columns at once ---

bikeshop_revenue_tbl %>% 
    set_names(c('Bikeshop name', 'Primary category', 'Sales'))

# Or do it programatically
bikeshop_revenue_tbl %>% 
    set_names(names(.) %>%  str_replace('_', ' ') %>% str_to_title())

# 7.0 Reshaping (Pivoting) Data with spread() and gather() ----

# 7.1 spread(): Long to Wide ----
bikeshop_revenue_formatted <- bikeshop_revenue_tbl %>% 
    
    spread(key = category_1, value = sales) %>% 
    arrange(desc(Mountain)) %>% 
    rename(`Bikeshop Name` = bikeshop_name) %>% 

    mutate(
        Mountain = scales::dollar(Mountain),
        Road     = scales::dollar(Road)
    )
bikeshop_revenue_formatted

# or with pivot_wider and across
bikeshop_revenue_tbl %>% 
    pivot_wider(names_from = category_1,
                values_from = sales) %>% 
    arrange(desc(Mountain)) %>% 
    rename(`Bikeshop Name` = bikeshop_name) %>% 
    mutate(across(where(is.numeric), scales::dollar))

# 7.2 gather(): Wide to Long ----

bikeshop_revenue_formatted %>% 
    gather(key = 'category_1', value = 'sales', Mountain, Road)
# Or negate???
bikeshop_revenue_formatted %>% 
    gather(key = 'category_1', value = 'sales', -`Bikeshop Name`) %>% 
    # Format back to numeric
    mutate(sales = sales %>% str_remove_all('\\$|,') %>% as.double()) %>% 
    arrange(desc(sales))

# 8.0 Joining Data by Key(s) with left_join() (e.g. VLOOKUP in Excel) ----
# Join
orderlines_tbl 

bikes_tbl
?left_join

orderlines_tbl %>% 
    left_join(y = bikes_tbl, by = c('product.id' = 'bike.id'))

# 9.0 Binding Data by Row or by Column with bind_rows() and bind_col() ----

# 9.1 bind_cols() ----
# it's only a case example!!!!
bike_orderlines_tbl %>% 
    select(-contains('order')) %>% 
    
    bind_cols(
        bike_orderlines_tbl %>% select(order_id)
    )

# 9.2 bind_rows() ----
# Again another case example
train_tbl <-  bike_orderlines_tbl %>% 
    slice(1:(nrow(.)/2))
train_tbl

test_tbl <- bike_orderlines_tbl %>% 
    slice((nrow(.)/2) + 1:nrow(.))
test_tbl
# merging back (Is it like a check-up?)
train_tbl %>% 
    bind_rows(test_tbl) 
# 10 Separate and Unite ----
# working with texts
# separate() & unite()

bike_orderlines_tbl %>% 
    select(order_date) %>% 
    mutate(order_date = as.character(order_date)) %>% # text data 
    separate(col = order_date, into = c('year', 'month', 'day'), 
             sep = '-', remove = FALSE) %>% 
    mutate(
        year  = as.numeric(year),
        month = as.numeric(month),
        day   = as.numeric(day)
    ) %>% 
    unite(order_date_united, year, month, day , sep = '-', remove = FALSE) %>% 
    mutate(order_date_united = as.Date(order_date_united))
